name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Build packages
      run: npm run build --if-present

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    
    strategy:
      matrix:
        service: [api, dashboard]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./packages/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "Using existing CHANGELOG.md"
          # Extract latest version changes (simple approach)
          sed -n '/^## \[/,/^## \[/p' CHANGELOG.md | head -n -1 > latest_changes.md
        else
          echo "Generating basic changelog from commits"
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > latest_changes.md
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        body_path: latest_changes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        files: |
          LICENSE
          README.md
        generate_release_notes: true